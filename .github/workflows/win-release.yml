name: Release
on: [push]

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.14.4"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build and package
        run: |
          make man-pages
          mkdir -p tmp

          while read os arch; do
            [ -n "$os" ] || continue
            GOOS="$os" GOARCH="$arch" script/build -o bin/hub
            tar czf "tmp/hub-${os}-${arch}-2.15.0.tgz" --exclude '*.md' -- bin/hub LICENSE etc share
          done <<<"
            linux    amd64
            linux    386
            linux    arm64
            linux    arm
            freebsd  amd64
            freebsd  386
          "

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: tmp/hub-*.tgz

  macos:
    runs-on: macos-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.14.4"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Obtain signing cert
        id: obtain_cert
        run: ./script/setup-macos-certificate.sh
        env:
          DESKTOP_CERT_TOKEN: ${{ secrets.DESKTOP_CERT_TOKEN }}
          CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}

      - name: Build
        run: make bin/hub man-pages

      - name: Sign binary
        run: |
          cert="$(security find-identity -v "$KEY_CHAIN" | awk '/Developer ID Application/ {print $2}')"
          codesign -s "$cert" bin/hub
        env:
          KEY_CHAIN: ${{ steps.obtain_cert.outputs.keychain }}

      - name: Package
        run: |
          mkdir -p tmp
          tar czf tmp/hub-darwin-amd64-2.15.0.tgz --exclude '*.md' -- bin/hub LICENSE etc share

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: tmp/hub-*.tgz

  windows:
    runs-on: windows-latest
    steps:
      - name: Install go-msi
        run: choco install -y go-msi

      - name: Prepare PATH
        shell: bash
        run: |
          echo "::add-path::$WIX\\bin"
          echo '::add-path::C:\Program Files\go-msi'
          echo '::add-path::C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x86'

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "^1.14.4"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Obtain signing cert
        shell: bash
        run: |
          curl -fsSLO https://api.github.com/repos/desktop/desktop-secrets/contents/windows-certificate.pfx \
            -H "Authorization: token $DESKTOP_CERT_TOKEN" \
            -H "Accept: application/vnd.github.v3.raw"
        env:
          DESKTOP_CERT_TOKEN: ${{ secrets.DESKTOP_CERT_TOKEN }}

      - name: Build, sign, and package
        shell: bash
        run: |
          sign() {
            signtool sign /d "hub CLI" /f windows-certificate.pfx /p "$GITHUB_CERT_PASSWORD" \
              /sha1 "$CERT_THUMBPRINT" /fd sha256 /tr http://timestamp.digicert.com /td sha256 /v "$1"
          }

          make man-pages
          rm -rf share/{man,vim}

          for arch in amd64 386; do
            GOARCH="$arch" script/build -o bin/hub.exe

            release="hub-windows-${arch}-2.15.0"
            tmpdir="tmp/build"
            rm -rf "$tmpdir"
            mkdir -p "$tmpdir"
            msi="tmp/${release}.msi"
            zipfile="tmp/${release}.zip"
            rm -f "$zipfile"
            
            go-msi make --msi "$PWD/$msi" --out "$PWD/$tmpdir" --version 2.15.0
            sign "$msi"
            sign bin/hub.exe
            zip "$zipfile" bin/hub.exe share/doc/*/*.html
          done
        env:
          GITHUB_CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
          CERT_THUMBPRINT: fb713a60a7fa79dfc03cb301ca05d4e8c1bdd431

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: tmp/*.{msi,zip}

  release:
    needs: [linux, macos, windows]
    runs-on: ubuntu-latest

    steps:
      - name: Collect artifacts
        uses: actions/download-artifact@v2
        with:
          name: packages

      - name: debug
        run: ls -R
