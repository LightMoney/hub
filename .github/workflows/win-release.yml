name: Release
on: [push]

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.15"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build and package
        env:
          CGO_ENABLED: 0
        run: |
          make man-pages
          mkdir -p tmp

          while read os arch; do
            [ -n "$os" ] || continue
            GOOS="$os" GOARCH="$arch" LDFLAGS="-s -w" script/build -o bin/hub
            tar czf "tmp/hub-${os}-${arch}-2.15.0.tgz" --exclude '*.md' -- bin/hub LICENSE etc share
          done <<<"
            linux    amd64
            linux    386
            linux    arm64
            linux    arm
            freebsd  amd64
            freebsd  386
          "

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: linux-packages
          path: tmp/hub-*.tgz

  macos:
    runs-on: macos-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.15"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Obtain signing cert
        id: obtain_cert
        run: ./script/setup-macos-certificate.sh
        env:
          DESKTOP_CERT_TOKEN: ${{ secrets.DESKTOP_CERT_TOKEN }}
          CERT_PASSWORD: ${{ secrets.MACOS_CERT_PASSWORD }}

      - name: Build
        env:
          CGO_ENABLED: 1
        run: |
          LDFLAGS="-s -w" make bin/hub
          make man-pages

      - name: Sign binary
        run: |
          cert="$(security find-identity -v "$KEY_CHAIN" | awk '/Developer ID Application/ {print $2}')"
          codesign -s "$cert" bin/hub
        env:
          KEY_CHAIN: ${{ steps.obtain_cert.outputs.keychain }}

      - name: Package
        run: |
          mkdir -p tmp
          tar czf tmp/hub-darwin-amd64-2.15.0.tgz --exclude '*.md' -- bin/hub LICENSE etc share

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos-packages
          path: tmp/hub-*.tgz

  windows:
    needs: macos
    runs-on: windows-latest
    steps:
      - name: Prepare PATH
        shell: powershell
        run: |
          echo "${env:WIX}bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.15"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Fetch generated man pages
        uses: actions/download-artifact@v2
        with:
          name: macos-packages

      - name: Extract man pages
        shell: bash
        run: tar xzf hub-darwin-amd64-*.tgz share

      - name: Obtain signing cert
        id: obtain_cert
        shell: powershell
        run: |
          $certURL = 'https://api.github.com/repos/desktop/desktop-secrets/contents/windows-certificate.pfx'
          $certFile = 'windows-certificate.pfx'

          $headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
          $headers.Add("Authorization", "token $env:DESKTOP_CERT_TOKEN")
          $headers.Add("Accept", 'application/vnd.github.v3.raw')

          Invoke-WebRequest $certURL -Headers $headers -OutFile $certFile
          "::set-output name={0}::{1}" -f "cert-file", $certFile
        env:
          DESKTOP_CERT_TOKEN: ${{ secrets.DESKTOP_CERT_TOKEN }}

      - name: Build, sign, and package
        shell: powershell
        run: |
          function Sign-Executable {
            param (
                [string]$File,
                [string]$Description = ""
            )
            $signtool = dir 'C:\Program Files (x86)\Windows Kits\10\bin\*\x86\signtool.exe'
            & $signtool[0] sign /d $Description /f $env:CERT_FILE /p $env:CERT_PASSWORD `
                /sha1 $env:CERT_THUMBPRINT /fd sha256 /tr http://timestamp.digicert.com /td sha256 /q $File
          }

          go build -o bin\hub.exe -ldflags "-X github.com/github/hub/v2/version.Version=2.15.0 -s -w"
          Sign-Executable -File bin\hub.exe -Description "hub CLI"

          New-Item -Name tmp -ItemType Directory -Force >$null
          Compress-Archive -Path bin\hub.exe -DestinationPath tmp\hub-windows-amd64-2.15.0.zip
        env:
          CGO_ENABLED: 1
          CERT_FILE: ${{ steps.obtain_cert.outputs.cert-file }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
          CERT_THUMBPRINT: fb713a60a7fa79dfc03cb301ca05d4e8c1bdd431

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-packages
          path: |
            tmp/*.zip
            tmp/*.msi

  release:
    needs: [linux, macos, windows]
    runs-on: ubuntu-latest

    steps:
      - name: Collect artifacts
        uses: actions/download-artifact@v2

      - name: debug
        run: ls -R
